/*
 * Author:Tao Lu <hakufu.asano@gmail.com>
 *
 * Solution for merge sorting
 */

#include <stdio.h>
#include <stdbool.h>
#include <stdlib.h>
#include <time.h>

#define MAX 10
#define RANGE 50


void display(int *list) {
	int i, j, k;
	int step = 20;

	printf("[ ");
	printf("\n");
	for(j = 0; j < MAX/step; j++) {
		for(i = 0; i < step; i++) {
			k = step*j + i;
			//printf("%d ", k);
			printf("%d ", list[k]);
		}
		printf("\n");
	}
	printf("]");
}


void divide(int low, int high) {
	int mid;

	if(low < high) {
		mid = (low + high) / 2;
		printf("before recursion        low = %d,  mid = %d, high = %d \n", low, mid, high);
		divide(low, mid);
		printf("after low recursion     low = %d,  mid = %d, high = %d \n", low, mid, high);

		divide(mid +1, high);
		printf("after high recursion    low = %d,  mid = %d, high = %d \n", low, mid, high);
	} else {
		printf("last recursion          low = %d,  mid = %d, high = %d \n", low, mid, high);
		return;
	}
}


void merge(){
}


int main(void) {
	int list[MAX], n, number;
	
	srand((unsigned) time(NULL));
	for(n = 0; n < MAX; n++) {
		number = rand()%RANGE+1;
		list[n] = number;
	}

	divide(0, MAX-1);

	//printf("Before insertion sort: \n");
	////display(list);
	//printf("\n");

	//printf("After insertion sort: \n");
	//insertionSort(list);
	////display(list);
	//printf("\n");

	return 0;
}
